{"version":3,"sources":["lib/contracts/escrow.tmpl.teal","AlgorandWalletConnector.tsx","App.tsx","index.tsx","lib/algorand.ts"],"names":["AlgorandWalletConnector","props","React","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","e","a","choice","currentTarget","id","allowedWallets","undefined","wallet","disconnect","sw","SessionWallet","network","permissionCallback","connect","interval","setInterval","wc","localStorage","getItem","wcObj","JSON","parse","accounts","length","clearInterval","setAccountList","connected","then","success","walletOptions","Object","entries","k","v","push","large","fill","minimal","outlined","onClick","className","alt","src","img","darkMode","displayName","style","color","borderColor","borderRadius","rightIcon","intent","isOpen","title","onClose","Classes","DIALOG_BODY","addr_list","accts","map","addr","idx","value","substr","onChange","setAccountIndex","parseInt","target","iconProps","icon","defaultValue","accountIndex","HelpDropdown","useState","setIsOpen","canEscapeKeyClose","canOutsideClickClose","isCloseButtonShown","href","ClaimDialog","open","signed","setSigned","progress","setProgress","handleClose","useCallback","useEffect","p","background","animate","margin","triggerHelp","text","App","conf","setSessionWallet","url","name","nft","setNFT","accountList","setAccounts","setConnected","claimable","setClaimable","setImgLoading","loading","setLoading","setOpen","params","URLSearchParams","window","location","search","escrow","get","secret","getAsaId","asaId","collect","txn_group","nftpromise","getNFT","sendWait","alert","buttons","message","width","marginTop","disabled","document","createElement","download","body","appendChild","click","removeChild","float","marginRight","Group","align","Alignment","LEFT","Heading","RIGHT","elevation","Elevation","FOUR","onLoad","getElementById","ReactDOM","render","StrictMode","seeder","algod","host","port","token","client","algosdk","Algodv2","claimer","getDefaultAccount","getLsig","lsig","getTransactionParams","do","sp","optinTxn","Transaction","from","to","assetIndex","type","TransactionType","axfer","amount","xferTxn","closeRemainderTo","closeTxn","pay","grouped","assignGroupID","args","createSignature","txID","s_xfer","signLogicSigTransactionObject","s_close","signTxn","s_optin","txid","pd","Buffer","decodeAddress","publicKey","btxid","base32","decode","asBytes","toSign","Uint8Array","set","sk","nacl","sign","detached","getAssetByID","asa","cid","split","accountInformation","ai","Error","toString","addrHex","get_file","escrow_template","tmpl","replace","compile","compiled","LogicSigAccount","program","fetch","response","checkStatus","arrayBuffer","buffer","TextDecoder","catch","err","console","error","ok","status","statusText","sendRawTransaction","t","blob","txId","waitForConfirmation","result","algodclient","timeout","startround","currentround","pendingTransactionInformation","pending","statusAfterBlock"],"mappings":"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","file":"static/js/main.6672852f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/escrow.tmpl.091ece65.teal\";","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        const interval = setInterval(()=>{\n            // If they've already connected, we wont get an on connect, have to check here\n            const wc = localStorage.getItem(\"walletconnect\")\n            if(wc === null || wc === undefined || wc === \"\") return;\n\n            const wcObj = JSON.parse(wc)\n            const accounts = wcObj.accounts\n            if(accounts.length>0){\n                clearInterval(interval)\n                sw.setAccountList(wcObj.accounts)\n                props.updateWallet(new SessionWallet(sw.network, sw.permissionCallback, choice))\n            }\n        }, 250)\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        // NOTE: remove if you want other wallets\n        if(k !== \"wallet-connect\") continue\n\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                style={{color: 'white', borderColor: 'white', borderRadius: '8px'}}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport { SessionWallet } from 'algorand-session-wallet';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport { Alignment, AnchorButton, Button, Card, Elevation, Navbar, ProgressBar } from '@blueprintjs/core';\nimport { conf, collect, sendWait, getAsaId, getNFT }  from './lib/algorand'\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { BrowserView, MobileView } from 'react-device-detect'\n\n\n\nfunction App() {\n  const sw = new SessionWallet(conf.network)\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n\n  const [nft, setNFT]               = React.useState({id: 0, url:'algo-gator.png', name:\"TBD\"})\n  const [accts, setAccounts]        = React.useState(sw.accountList())\n  const [connected, setConnected]   = React.useState(sw.connected())\n  const [claimable, setClaimable]   = React.useState(true)\n\n  const [imgLoading, setImgLoading] = React.useState(true)\n  const [loading, setLoading]       = React.useState(false)\n  const [signed, setSigned]         = React.useState(false)\n  const [open, setOpen]             = React.useState(false)\n\n\n  const params  = new URLSearchParams(window.location.search);\n  const escrow  = params.get(\"escrow\")\n  const addr    = params.get(\"addr\")\n  const secret  = params.get(\"secret\")\n\n  useEffect(()=>{\n    setClaimable(secret !== null && addr !== null && escrow !== null)\n  }, [escrow, addr, secret])\n  \n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  function triggerHelp() {\n    setOpen(false)\n    setLoading(false)\n    document.getElementById(\"help-text\")?.click()\n  }\n\n  function imgLoaded(){\n    setImgLoading(false)\n  }\n\n  function handleDownload(){\n    var a = document.createElement('a')\n    a.href = nft.url\n    a.download = nft.name\n    a.target = \"_blank\"\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n  }\n\n  async function handleCollect() {\n    if(secret === null || addr === null || escrow === null){\n      return\n    }\n\n    setLoading(true)\n    setOpen(true)\n\n    try {\n      const asaId       = await getAsaId(escrow)\n      const txn_group   = await collect(sw, asaId, escrow, addr, secret)\n      const nftpromise  = getNFT(asaId)\n\n      setSigned(true)\n\n      await sendWait(txn_group)\n\n      setImgLoading(true)\n      setNFT(await nftpromise)\n\n      setClaimable(false)\n    } catch (error) {\n      alert(\"Something went wrong: \"+error) \n    }\n\n    setOpen(false)\n    setLoading(false)\n  }\n\n  let message = (\n    <div>\n      <h3> Greetings Algonaut!</h3> \n      <p> \n      Connect your wallet and collect your NFT ticket\n      </p>\n    </div>\n  )\n\n  if(nft.id !== 0) {\n    if(nft.id<420774977){\n        message = (\n          <div>\n            <h3> Congrats on successfully collecting your Decipher Ticket!  </h3>\n            <p>\n              Please make sure the asset is in your Algorand Mobile Wallet and ready to be presented when you arrive at the venue.\n              See you at Decipher!\n            </p>\n          </div>\n        )\n    }else{\n      message = (\n        <div>\n          <h3> Congrats on successfully collecting your Algo Gator NFT!  </h3>\n          <p>\n            Enjoy it as a commemorative token that you’ve earned by being part of the Algorand community and signing up as a virtual VIP.\n            See you online at Decipher!\n          </p>\n        </div>\n      )\n    }\n  }\n\n  let buttons; \n  if(nft.id === 0){\n   buttons = (   \n    <Button \n          style={{color: 'white', borderColor: 'white', borderRadius: '8px', width: '100%', marginTop: '8px'}}\n          minimal={true} \n          outlined={true} \n          intent='success' \n          large={true} \n          icon='circle' \n          text='Collect' \n          onClick={handleCollect}  \n          disabled={!connected || !claimable}\n          loading={loading}\n        />\n    )\n\n    }else{\n      buttons = (\n        <div>\n          <Button \n              style={{color: 'white', borderColor: 'white', borderRadius: '8px', margin: '8px'}}\n              minimal={true} \n              outlined={true} \n              intent='success' \n              large={true} \n              icon='download' \n              text='Download' \n              onClick={handleDownload}  \n            />\n          <AnchorButton \n              style={{color: 'white', borderColor: 'white', borderRadius: '8px',  margin: '8px'}}\n              minimal={true} \n              outlined={true} \n              large={true} \n              intent='success' \n              href={'https://www.nftexplorer.app/asset/'+nft.id} >\n              <img style={{width:'20px', float:'left', marginRight:'8px'}} alt='nft explorer icon' src='/nftexplorer.ico' /> \n              NFT Explorer\n            </AnchorButton>\n        </div>\n      )\n  }\n\n  return (\n    <div className=\"App\" style={{background: '#000'}}>\n      <Navbar style={{background: 'linear-gradient(90deg,#b72375 3%,#f37e33 97%)'}}>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading><img alt='Algorand A' className='header-icon' src='favicon.ico' /></Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n          <AlgorandWalletConnector  \n            darkMode={true}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n        </Navbar.Group>\n      </Navbar>\n      <div className='container'>\n        <Card elevation={Elevation.FOUR} className='ticket-card'>\n          <div className='content' >\n\n            <div className='content-piece' >\n              <img alt='NFT' className={'gator '+ imgLoading?'bp3-skeleton':''} src={nft.url} onLoad={imgLoaded} />\n            </div>\n            <div className='content-details' >\n\n              <div className='detail-prose' style={{color: 'white'}} >\n                  {message}\n              </div>\n\n              <div className='collect-button' >\n                {buttons}\n              </div>\n\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <div className='container'>\n        <HelpDropdown />\n      </div>\n\n      <ClaimDialog triggerHelp={triggerHelp} open={open} signed={signed} />\n    </div>\n  );\n\n}\n\nfunction HelpDropdown() {\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  return (\n    <div className='help-container'>\n      <Button id='help-text' icon='help' minimal={true} intent='primary' outlined={true} onClick={() => setIsOpen(true)} >\n        Need Help?\n      </Button>\n      <Dialog isOpen={isOpen} canEscapeKeyClose={true} canOutsideClickClose={true} isCloseButtonShown={true} onClose={() => setIsOpen(false)} >\n        <div className='container'>\n          <div className='help-text' >\n            <p style={{color: '#000 !important'}}>\n                <h3>How to collect your Algo Gator</h3>\n\n                <p>\n                  First, you will need to download the <a href=\"https://algorandwallet.com/\">Algorand Wallet</a> \n                  (make sure you have the latest version) and load it with at least 0.3 Algo. \n                </p>\n\n                <p>Second, click the “Connect” button on the top right of this page and proceed as follows</p>\n\n                <MobileView>\n                  <ul>\n                    <li>A pop-up will appear with the toggle on “Mobile” -- Choose the account you wish to use -- Click “Connect”</li>\n                    <li>Return to the landing page on your mobile browser. Your Algorand Wallet address should now appear on the top right corner of the page</li>\n                    <li>Click “Collect” on the web page in your mobile browser, and then switch to the wallet App to “Approve” the transaction</li>\n                  </ul>\n                </MobileView>\n                <BrowserView>\n                  <ul>\n                    <li>Scan the QR code using the scanner within your mobile Algorand Wallet </li>\n                    <li>A pop-up will appear within the mobile app -- Choose the account you wish to use -- Click “Connect”</li>\n                    <li>At this point, your Algorand Wallet address will appear on the top right corner of the desktop landing page</li>\n                    <li>Click “Collect” on the web page, and then “Approve” the transaction within your mobile wallet</li>\n                  </ul>\n                </BrowserView>\n\n                <p>\n                  Once approved and the transaction is processed, your unique 1/1 Algo Gator NFT asset will appear on this page \n                  and within your mobile Algorand wallet. \n                  (Note that the Algorand Wallet will show the Asset Name and Asset ID, not an actual image of the NFT...yet). \n                </p>\n\n                <p>\n                  <b> Not working? </b> Try turning the mobile app off and on again.\n                  Then, if you can, post some details <a href='https://github.com/algorand/algorand-wallet/issues/36' >here</a>.\n                </p>\n\n                <p>\n                  If you have any issues with the claiming process, please <a href=\"mailto:decipherevent@algorand.com\">reach out</a> for assistance. \n                </p>\n\n            </p>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  )\n}\n\n\ninterface ClaimDialogProps {\n  open: boolean\n  signed: boolean\n  triggerHelp(): void \n}\n\nfunction ClaimDialog(props: ClaimDialogProps){\n  const [isOpen, setIsOpen] = React.useState(props.open)\n  const [signed, setSigned] = React.useState(props.signed)\n  const [progress, setProgress] = React.useState(0)\n\n  const handleClose = React.useCallback(() => setIsOpen(false), []);\n\n  useEffect(() => {\n    setIsOpen(props.open)\n    setSigned(props.signed)\n  }, [props])\n\n  useEffect(()=>{\n    let p = 0\n    if(!signed || progress > 0 || progress >= 1.0) return;\n\n    // \"fake\" timer just to give enough time to submit txn and \n    // have it confirmed on the network, then load the NFT details\n    const step = 100 / (6 * 1000) \n    const interval = setInterval(()=>{\n        p += step\n        if(p > 1.0) {\n          clearInterval(interval)\n          setProgress(1.0)\n          return\n        }\n        setProgress(p)\n    }, 100)\n\n  }, [signed, progress])\n\n  return (\n      <Dialog isOpen={isOpen} onClose={handleClose} style={{background: '#000'}}>\n        <div className={Classes.DIALOG_BODY}>\n          {!signed?(\n          <div className='container' style={{color:'white'}}>\n            <p><b>Please Approve the transaction in your Mobile Wallet. </b></p>\n            <Button \n              style={{color: 'white', borderColor: 'white', borderRadius: '8px',  margin: '20px 0px -20px'}}\n              minimal={true}\n              outlined={true}\n              large = {true}\n              onClick={props.triggerHelp} \n              text='Having Issues?' \n              />\n          </div>\n          ):(\n            <ProgressBar animate={true} intent='success' value={progress} />\n          )}\n        </div>\n      </Dialog>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import algosdk, { LogicSigAccount, Transaction, TransactionType } from 'algosdk'\nimport { SessionWallet } from 'algorand-session-wallet';\nimport base32 from 'hi-base32';\nimport nacl from 'tweetnacl';\n\n//@ts-ignore\nimport escrow_template from './contracts/escrow.tmpl.teal'\n\nexport const conf = {\n    seeder: \"DCIPMQ3SDOVBX5IUY65LR7BZ2R63JCULO72J7IS3W2PUNW7JTAGYEHBRRA\",\n    network: \"MainNet\",\n    algod : {\n        host : \"https://algoexplorerapi.io\",\n        port : \"\",\n        token : \"\",\n    }\n}\n\nconst client = new algosdk.Algodv2(conf.algod.token, conf.algod.host , conf.algod.port)\n\ninterface SignedTxn {\n    txID: string,\n    blob: Uint8Array\n}\n\nexport interface NFT {\n    id: number\n    url: string\n    name: string\n}\n\nexport async function collect(sw: SessionWallet, asaId: number, escrow: string, addr: string, secret: string): Promise<SignedTxn[]> {\n\n    const claimer = sw.getDefaultAccount()\n\n    const lsig = await getLsig(addr)\n\n    const sp = await client.getTransactionParams().do()\n\n    const optinTxn = new Transaction({\n        from:claimer,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        ...sp\n    }) \n\n    const xferTxn = new Transaction({\n        from:escrow,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        closeRemainderTo: claimer,\n        ...sp\n    }) \n\n    const closeTxn = new Transaction({\n        from:escrow,\n        to:conf.seeder,\n        type:TransactionType.pay,\n        amount:0,\n        closeRemainderTo: conf.seeder,\n        ...sp\n    })\n\n    const grouped = [optinTxn, xferTxn, closeTxn]\n\n    algosdk.assignGroupID(grouped)\n\n    lsig.lsig.args = [createSignature(xferTxn.txID(), escrow, secret)]\n\n    const s_xfer = algosdk.signLogicSigTransactionObject(xferTxn, lsig)\n    const s_close = algosdk.signLogicSigTransactionObject(closeTxn, lsig)\n\n    const [s_optin, /*xfer*/ , /*close*/] = await sw.signTxn(grouped)\n\n    return [s_optin, s_xfer, s_close]\n}\n\nfunction createSignature(txid: string, escrow: string, secret: string): Uint8Array {\n    const pd    = Buffer.from(\"ProgData\")\n    const addr  = algosdk.decodeAddress(escrow).publicKey\n    const btxid = base32.decode.asBytes(txid)\n\n    const toSign = new Uint8Array(pd.length + addr.length + btxid.length)\n    toSign.set(pd, 0)\n    toSign.set(addr, pd.length)\n    toSign.set(btxid, pd.length + addr.length)\n\n    const sk = Buffer.from(secret, \"base64\")\n    return nacl.sign.detached(toSign, sk);\n}\n\nexport async function getNFT(asaId: number): Promise<NFT> {\n    const asa = await client.getAssetByID(asaId).do()\n    const p = asa['params']\n\n    // Assumes ipfs:// protocol\n    const cid = p['url'].split(\"://\")\n    const url = \"https://ipfs.io/ipfs/\"+cid[1]\n    \n    return { id:   asaId, url:  url, name: p['name'] } as NFT\n}\n\nexport async function getAsaId(escrow: string): Promise<number> {\n    const ai = await client.accountInformation(escrow).do()\n    if(ai['assets'].length !== 1) throw Error(\"Expected 1 ASA for \"+escrow+\" got: \"+ai['assets'].length.toString())\n    return ai['assets'][0]['asset-id']\n}\n\nasync function getLsig(addr: string): Promise<LogicSigAccount> {\n    const addrHex   = \"0x\"+Buffer.from(algosdk.decodeAddress(addr).publicKey).toString(\"hex\")\n\n    const tmpl      = await get_file(escrow_template)\n    const src       = tmpl.replace(\"TMPL_GEN_ADDR\", addrHex)\n\n    const compiled  = await client.compile(src).do()\n\n    return new LogicSigAccount(Buffer.from(compiled['result'], \"base64\"))\n}\n\nasync function get_file(program: string): Promise<string> {\n    return await fetch(program)\n        .then(response => checkStatus(response) && response.arrayBuffer())\n        .then(buffer => {\n            const td = new TextDecoder()\n            return td.decode(buffer)\n        }).catch(err => {\n            console.error(err)\n            return \"\"\n        });\n}\n\nfunction checkStatus(response: Response) {\n    if (!response.ok) throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n    return response;\n}\n\n// Send transactions to the network \nexport async function sendWait(signed: SignedTxn[]): Promise<any> {\n    const {txId}  = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n    const result = await waitForConfirmation(client, txId, 3)\n    return result \n}\n\nasync function waitForConfirmation(algodclient: algosdk.Algodv2, txId: string, timeout: number): Promise<any> {\n    if (algodclient == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await algodclient.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await algodclient\n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await algodclient.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n"],"sourceRoot":""}