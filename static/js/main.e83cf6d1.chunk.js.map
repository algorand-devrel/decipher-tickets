{"version":3,"sources":["lib/contracts/escrow.tmpl.teal","AlgorandWalletConnector.tsx","App.tsx","index.tsx","lib/algorand.ts"],"names":["AlgorandWalletConnector","props","React","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","e","a","choice","currentTarget","id","allowedWallets","undefined","wallet","disconnect","sw","SessionWallet","network","permissionCallback","connect","interval","setInterval","wc","localStorage","getItem","wcObj","JSON","parse","accounts","length","clearInterval","setAccountList","connected","then","success","walletOptions","Object","entries","k","v","push","large","fill","minimal","outlined","onClick","className","alt","src","img","darkMode","displayName","style","color","borderColor","borderRadius","rightIcon","intent","isOpen","title","onClose","Classes","DIALOG_BODY","addr_list","accts","map","addr","idx","value","substr","onChange","setAccountIndex","parseInt","target","iconProps","icon","defaultValue","accountIndex","ClaimDialog","useState","open","setIsOpen","signed","setSigned","progress","setProgress","handleClose","useCallback","useEffect","p","animate","App","conf","setSessionWallet","url","name","nft","setNFT","accountList","setAccounts","setConnected","claimable","setClaimable","loading","setLoading","setOpen","params","URLSearchParams","window","location","search","escrow","get","secret","getAsaId","asaId","collect","txn_group","sendWait","getNFT","background","Group","align","Alignment","LEFT","Heading","RIGHT","console","log","elevation","Elevation","FOUR","text","disabled","ReactDOM","render","StrictMode","document","getElementById","seeder","algod","host","port","token","client","algosdk","Algodv2","claimer","getDefaultAccount","getLsig","lsig","getTransactionParams","do","sp","lastRound","firstRound","optinTxn","Transaction","from","to","assetIndex","type","TransactionType","axfer","amount","xferTxn","closeRemainderTo","closeTxn","pay","grouped","assignGroupID","args","createSignature","txID","s_xfer","signLogicSigTransactionObject","s_close","signTxn","s_optin","txid","pd","Buffer","decodeAddress","publicKey","btxid","base32","decode","asBytes","toSign","Uint8Array","set","sk","nacl","sign","detached","getAssetByID","asa","accountInformation","ai","Error","addrHex","toString","get_file","escrow_template","tmpl","replace","compile","compiled","LogicSigAccount","program","fetch","response","checkStatus","arrayBuffer","buffer","TextDecoder","catch","err","error","ok","status","statusText","sendRawTransaction","t","blob","txId","waitForConfirmation","result","algodclient","timeout","startround","currentround","pendingTransactionInformation","pending","statusAfterBlock"],"mappings":"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","file":"static/js/main.e83cf6d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/escrow.tmpl.13c08d54.teal\";","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        const interval = setInterval(()=>{\n            // If they've already connected, we wont get an on connect, have to check here\n            const wc = localStorage.getItem(\"walletconnect\")\n            if(wc === null || wc === undefined || wc === \"\") return;\n\n            const wcObj = JSON.parse(wc)\n            const accounts = wcObj.accounts\n            if(accounts.length>0){\n                clearInterval(interval)\n                sw.setAccountList(wcObj.accounts)\n                props.updateWallet(new SessionWallet(sw.network, sw.permissionCallback, choice))\n            }\n        }, 250)\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        // NOTE: remove if you want other wallets\n        if(k !== \"wallet-connect\") continue\n\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                style={{color: 'white', borderColor: 'white', borderRadius: '8px'}}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport { SessionWallet } from 'algorand-session-wallet';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport { Alignment, Button, Card, Elevation, Navbar, ProgressBar } from '@blueprintjs/core';\nimport { conf, collect, sendWait, getAsaId, getNFT }  from './lib/algorand'\nimport { Classes, Dialog } from \"@blueprintjs/core\";\n\n\n\n\nfunction App() {\n  const sw = new SessionWallet(conf.network)\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n\n  const [nft, setNFT]               = React.useState({id: 0, url:'algo-gator.png', name:\"TBD\"})\n  const [accts, setAccounts]        = React.useState(sw.accountList())\n  const [connected, setConnected]   = React.useState(sw.connected())\n  const [claimable, setClaimable]   = React.useState(true)\n\n  const [loading, setLoading]       = React.useState(false)\n  const [signed, setSigned]         = React.useState(false)\n  const [open, setOpen]             = React.useState(false)\n\n\n  const params  = new URLSearchParams(window.location.search);\n  const escrow  = params.get(\"escrow\")\n  const addr    = params.get(\"addr\")\n  const secret  = params.get(\"secret\")\n\n  useEffect(()=>{\n    if(secret === null || addr === null || escrow === null){\n      setClaimable(false)\n    }\n  }, [escrow, addr, secret])\n  \n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n\n    console.log(\"In update wallet with account list: \", sw.accountList())\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  async function handleCollect() {\n    if(secret === null || addr == null || escrow == null){\n      return\n    }\n\n    setLoading(true)\n    setOpen(true)\n\n    const asaId = await getAsaId(escrow)\n    const txn_group = await collect(sw, asaId, escrow, addr, secret)\n\n    setSigned(true)\n\n    await sendWait(txn_group)\n\n    const nft = await getNFT(asaId)\n\n    setNFT(nft)\n    setOpen(false)\n    setLoading(false)\n\n  }\n\n /*\n\nFor #1-444 (IRL)\nCongrats on successfully collecting your Decipher Ticket!\nPlease make sure the asset is in your Algorand Mobile Wallet and ready to be presented when you arrive at the venue.\nSee you at Decipher!\n-----------------------------------\nFor #445-888 (Virtual)\nCongrats on successfully collecting your Algo Gator NFT!\nEnjoy it as a commemorative token that you’ve earned by being part of the Algorand community and signing up as a virtual VIP.\nSee you online at Decipher!\n  \n */\n\n  return (\n    <div className=\"App\" style={{background: '#000'}}>\n      <Navbar style={{background: 'linear-gradient(90deg,#b72375 3%,#f37e33 97%)'}}>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading><img alt='Algorand A' className='header-icon' src='favicon.ico' /></Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n          <AlgorandWalletConnector  \n            darkMode={true}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n        </Navbar.Group>\n      </Navbar>\n      <div className='container'>\n        <Card elevation={Elevation.FOUR} className='ticket-card'>\n          <div className='content' >\n\n            <div className='content-piece' >\n              <img alt='NFT' className='gator' src={nft.url} />\n            </div>\n            <div className='content-details' >\n\n              <div className='detail-prose' style={{color: 'white'}} >\n                <h3> Greetings Algonaut!</h3>\n                <p> \n                  Connect your wallet and claim your ticket\n                </p>\n              </div>\n\n\n              <div className='collect-button' >\n                <Button \n                    style={{color: 'white', borderColor: 'white', borderRadius: '8px'}}\n                    minimal={true} \n                    outlined={true} \n                    intent='success' \n                    large={true} \n                    icon='circle' \n                    text='Collect' \n                    onClick={handleCollect}  \n                    disabled={!claimable || !connected}\n                    loading={loading}\n                  />\n                </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n      <ClaimDialog open={open} signed={signed} />\n    </div>\n  );\n}\n\ninterface ClaimDialogProps {\n  open: boolean\n  signed: boolean\n}\n\nfunction ClaimDialog(props: ClaimDialogProps){\n  const [isOpen, setIsOpen] = React.useState(props.open)\n  const [signed, setSigned] = React.useState(props.signed)\n  const [progress, setProgress] = React.useState(0)\n\n  const handleClose = React.useCallback(() => setIsOpen(false), []);\n\n  useEffect(() => {\n    setIsOpen(props.open)\n    setSigned(props.signed)\n  }, [props])\n\n  useEffect(()=>{\n    let p = 0\n    if(!signed || progress > 0 || progress >= 1.0) return;\n\n    // 8 second \"fake\" timer just to give enough time to submit txn and \n    // have it confirmed on the network, then load the NFT details\n    const step = 100 / (8 * 1000) \n    const interval = setInterval(()=>{\n        p += step\n        if(p > 1.0) {\n          clearInterval(interval)\n          setProgress(1.0)\n          return\n        }\n        setProgress(p)\n    }, 100)\n\n  }, [signed, progress])\n\n  return (\n      <Dialog isOpen={isOpen} onClose={handleClose}>\n        <div className={Classes.DIALOG_BODY}>\n          {!signed?(\n          <div className='container'>\n            <p>Please Approve the transaction in your Mobile Wallet</p>\n          </div>\n          ):(\n            <ProgressBar animate={true} intent='success' value={progress} />\n          )}\n        </div>\n      </Dialog>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import algosdk, { LogicSigAccount, Transaction, TransactionType } from 'algosdk'\nimport { SessionWallet } from 'algorand-session-wallet';\nimport base32 from 'hi-base32';\nimport nacl from 'tweetnacl';\n\n//@ts-ignore\nimport escrow_template from './contracts/escrow.tmpl.teal'\n\nexport const conf = {\n    seeder: \"XPLR7X7LQESKDK3SJYGLM7XJRN7FSINV3AZXKAQIZM4CXAM2ATLQQYXLCA\",\n    network: \"TestNet\",\n    algod : {\n        host : \"https://testnet.algoexplorerapi.io\",\n        port : \"\",\n        token : \"\",\n    }\n}\n\nconst client = new algosdk.Algodv2(conf.algod.token, conf.algod.host , conf.algod.port)\n\ninterface SignedTxn {\n    txID: string,\n    blob: Uint8Array\n}\n\nexport interface NFT {\n    id: number\n    url: string\n    name: string\n}\n\nexport async function collect(sw: SessionWallet, asaId: number, escrow: string, addr: string, secret: string): Promise<SignedTxn[]> {\n\n    const claimer = sw.getDefaultAccount()\n\n    const lsig = await getLsig(addr)\n\n    const sp = await client.getTransactionParams().do()\n    sp.lastRound = sp.firstRound + 10\n\n    const optinTxn = new Transaction({\n        from:claimer,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        ...sp\n    }) \n\n    const xferTxn = new Transaction({\n        from:escrow,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        closeRemainderTo: claimer,\n        ...sp\n    }) \n\n    const closeTxn = new Transaction({\n        from:escrow,\n        to:conf.seeder,\n        type:TransactionType.pay,\n        amount:0,\n        closeRemainderTo: conf.seeder,\n        ...sp\n    })\n\n    const grouped = [optinTxn, xferTxn, closeTxn]\n\n    algosdk.assignGroupID(grouped)\n\n    lsig.lsig.args = [createSignature(xferTxn.txID(), escrow, secret)]\n\n    const s_xfer = algosdk.signLogicSigTransactionObject(xferTxn, lsig)\n    const s_close = algosdk.signLogicSigTransactionObject(closeTxn, lsig)\n\n    const [s_optin, /*xfer*/ , /*close*/] = await sw.signTxn(grouped)\n    //const s_optin = algosdk.signTransaction(optinTxn, sk.sk)\n\n    return [s_optin, s_xfer, s_close]\n}\n\nfunction createSignature(txid: string, escrow: string, secret: string): Uint8Array {\n    const pd    = Buffer.from(\"ProgData\")\n    const addr  = algosdk.decodeAddress(escrow).publicKey\n    const btxid = base32.decode.asBytes(txid)\n\n    const toSign = new Uint8Array(pd.length + addr.length + btxid.length)\n    toSign.set(pd, 0)\n    toSign.set(addr, pd.length)\n    toSign.set(btxid, pd.length + addr.length)\n\n    const sk = Buffer.from(secret, \"base64\")\n    return nacl.sign.detached(toSign, sk);\n}\n\nexport async function getNFT(asaId: number): Promise<NFT> {\n    const asa = await client.getAssetByID(asaId).do()\n    const p = asa['params']\n    console.log(asa)\n    return {\n        id:   asaId,\n        url:  p['url'],\n        name: p['name']\n    } as NFT\n}\n\nexport async function getAsaId(escrow: string): Promise<number> {\n    const ai = await client.accountInformation(escrow).do()\n    if(ai['assets'].length !== 1) throw Error(\"wat\")\n    return ai['assets'][0]['asset-id']\n}\n\nasync function getLsig(addr: string): Promise<LogicSigAccount> {\n    const addrHex   = \"0x\"+Buffer.from(algosdk.decodeAddress(addr).publicKey).toString(\"hex\")\n\n    const tmpl      = await get_file(escrow_template)\n    const src       = tmpl.replace(\"TMPL_GEN_ADDR\", addrHex)\n\n    const compiled  = await client.compile(src).do()\n\n    return new LogicSigAccount(Buffer.from(compiled['result'], \"base64\"))\n}\n\nasync function get_file(program: string): Promise<string> {\n    return await fetch(program)\n        .then(response => checkStatus(response) && response.arrayBuffer())\n        .then(buffer => {\n            const td = new TextDecoder()\n            return td.decode(buffer)\n        }).catch(err => {\n            console.error(err)\n            return \"\"\n        });\n}\n\nfunction checkStatus(response: Response) {\n    if (!response.ok) throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n    return response;\n}\n\n// Send transactions to the network \nexport async function sendWait(signed: SignedTxn[]): Promise<any> {\n    const {txId}  = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n    const result = await waitForConfirmation(client, txId, 3)\n    return result \n}\n\nasync function waitForConfirmation(algodclient: algosdk.Algodv2, txId: string, timeout: number): Promise<any> {\n    if (algodclient == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await algodclient.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await algodclient\n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await algodclient.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n"],"sourceRoot":""}